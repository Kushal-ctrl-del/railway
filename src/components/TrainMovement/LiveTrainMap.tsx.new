import React, { useState, useEffect, useMemo } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap, Polyline, Circle, Pane } from 'react-leaflet';
import MarkerClusterGroup from 'react-leaflet-cluster';
import L from 'leaflet';
import { Search, Eye, EyeOff } from 'lucide-react';
import { Train } from '../../types/train';
import { generateTrainData, updateTrainPosition } from '../../utils/trainDataGenerator';
import 'leaflet/dist/leaflet.css';

// Fix for default markers in react-leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

// Generate track segments between major Indian cities
const generateTrackSegments = () => {
  // Major Indian cities with their coordinates
  type CityName = 'delhi' | 'mumbai' | 'chennai' | 'kolkata' | 'bangalore' | 
                 'hyderabad' | 'ahmedabad' | 'pune' | 'jaipur' | 'lucknow';
  
  const cities: Record<CityName, [number, number]> = {
    delhi: [28.6139, 77.2090],
    mumbai: [19.0760, 72.8777],
    chennai: [13.0827, 80.2707],
    kolkata: [22.5726, 88.3639],
    bangalore: [12.9716, 77.5946],
    hyderabad: [17.3850, 78.4867],
    ahmedabad: [23.0225, 72.5714],
    pune: [18.5204, 73.8567],
    jaipur: [26.9124, 75.7873],
    lucknow: [26.8467, 80.9462]
  } as const;

  // Define major rail routes between cities
  const routes: {from: CityName, to: CityName}[] = [
    { from: 'delhi', to: 'mumbai' },
    { from: 'delhi', to: 'kolkata' },
    { from: 'delhi', to: 'chennai' },
    { from: 'mumbai', to: 'chennai' },
    { from: 'mumbai', to: 'hyderabad' },
    { from: 'chennai', to: 'hyderabad' },
    { from: 'chennai', to: 'bangalore' },
    { from: 'bangalore', to: 'hyderabad' },
    { from: 'bangalore', to: 'mumbai' },
    { from: 'kolkata', to: 'chennai' },
    { from: 'delhi', to: 'jaipur' },
    { from: 'jaipur', to: 'ahmedabad' },
    { from: 'ahmedabad', to: 'mumbai' },
    { from: 'delhi', to: 'lucknow' },
    { from: 'lucknow', to: 'kolkata' },
    { from: 'hyderabad', to: 'pune' },
    { from: 'pune', to: 'mumbai' },
    { from: 'pune', to: 'bangalore' }
  ];

  return routes.map(({from, to}, index) => ({
    id: `track-${index}`,
    coordinates: [
      [cities[from][0], cities[from][1]],
      [cities[to][0], cities[to][1]]
    ] as [number, number][],
    name: `${from.toUpperCase()}-${to.toUpperCase()}`
  }));
};

// Custom train icons
const createTrainIcon = (type: string, heading: number = 0) => {
  const colors = {
    Express: '#EF4444', // Red
    Freight: '#10B981', // Green
    Local: '#3B82F6'    // Blue
  };
  
  const color = colors[type as keyof typeof colors] || '#6B7280';
  
  return L.divIcon({
    html: `
      <div style="
        width: 20px; 
        height: 20px; 
        background: ${color}; 
        border: 2px solid white; 
        border-radius: 50%; 
        transform: rotate(${heading}deg);
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        position: relative;
      ">
        <div style="
          position: absolute;
          top: -2px;
          right: -2px;
          width: 0;
          height: 0;
          border-left: 4px solid transparent;
          border-right: 4px solid transparent;
          border-bottom: 8px solid ${color};
          transform: rotate(45deg);
        "></div>
      </div>
    `,
    className: 'custom-train-icon',
    iconSize: [20, 20],
    iconAnchor: [10, 10]
  });
};

interface LiveTrainMapProps {
  selectedTrain?: string;
  onSelectTrain?: (trainId: string) => void;
}

// Component to handle map updates
const MapController: React.FC<{ center: [number, number], zoom: number }> = ({ center, zoom }) => {
  const map = useMap();
  
  useEffect(() => {
    map.setView(center, zoom);
  }, [map, center, zoom]);
  
  return null;
};

export const LiveTrainMap: React.FC<LiveTrainMapProps> = ({ onSelectTrain }) => {
  const [trains, setTrains] = useState<Train[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [visibleTypes, setVisibleTypes] = useState({
    Express: true,
    Freight: true,
    Local: true
  });
  const [mapCenter] = useState<[number, number]>([20.5937, 78.9629]); // Center of India
  const [mapZoom] = useState(5);
  const [isLoading, setIsLoading] = useState(true);

  // Initialize train data
  useEffect(() => {
    const initialTrains = generateTrainData(500);
    setTrains(initialTrains);
    setIsLoading(false);
  }, []);

  // Update train positions every 2 seconds
  useEffect(() => {
    if (trains.length === 0) return;

    const interval = setInterval(() => {
      setTrains(prevTrains => 
        prevTrains.map(train => 
          train.currentSpeed > 0 ? updateTrainPosition(train) : train
        )
      );
    }, 2000);

    return () => clearInterval(interval);
  }, [trains]);

  // Filter trains based on search and visibility
  const filteredTrains = useMemo(() => {
    return trains.filter(train => {
      const matchesSearch = train.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         train.id.toLowerCase().includes(searchTerm.toLowerCase());
      const isVisible = visibleTypes[train.type as keyof typeof visibleTypes];
      return matchesSearch && isVisible;
    });
  }, [trains, searchTerm, visibleTypes]);

  // Handle train search
  const handleSearch = (trainId: string) => {
    const train = trains.find(t => t.id === trainId || t.name.toLowerCase().includes(trainId.toLowerCase()));
    if (train && train.lat && train.lng) {
      onSelectTrain?.(train.id);
    }
  };

  const toggleTrainType = (type: keyof typeof visibleTypes) => {
    setVisibleTypes(prev => ({
      ...prev,
      [type]: !prev[type]
    }));
  };

  const trackSegments = generateTrackSegments();

  if (isLoading) {
    return (
      <div className="bg-gray-800 rounded-lg p-4 h-full flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-blue-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white">Loading train data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg p-4 h-full flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
          <h3 className="text-lg font-semibold text-white">Live Train Map - India</h3>
          <span className="text-sm text-gray-400">({filteredTrains.length} trains)</span>
        </div>
      </div>

      {/* Controls */}
      <div className="flex gap-4 mb-4">
        {/* Search */}
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search trains by ID or name..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSearch(searchTerm)}
            className="w-full bg-gray-700 text-white rounded-lg pl-10 pr-4 py-2 text-sm border border-gray-600 focus:border-blue-500 focus:outline-none"
          />
        </div>

        {/* Filters */}
        <div className="flex gap-2">
          {Object.entries(visibleTypes).map(([type, visible]) => (
            <button
              key={type}
              onClick={() => toggleTrainType(type as keyof typeof visibleTypes)}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                visible 
                  ? type === 'Express' ? 'bg-red-500/20 text-red-400' :
                    type === 'Freight' ? 'bg-green-500/20 text-green-400' :
                    'bg-blue-500/20 text-blue-400'
                  : 'bg-gray-700 text-gray-400'
              }`}
            >
              {visible ? <Eye className="w-3 h-3" /> : <EyeOff className="w-3 h-3" />}
              {type}
            </button>
          ))}
        </div>
      </div>

      {/* Map Container */}
      <div className="flex-1 rounded-lg overflow-hidden">
        <MapContainer 
          center={mapCenter}
          zoom={mapZoom}
          style={{ height: '100%', width: '100%' }}
          zoomControl={false}
        >
          <TileLayer
            url="https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openrailwaymap.org/">OpenRailwayMap</a> | Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            maxZoom={19}
          />
          <MapController center={mapCenter} zoom={mapZoom} />
          
          {/* Tracks */}
          <Pane name="tracks" style={{ zIndex: 1 }}>
            {trackSegments.map((track) => (
              <Polyline
                key={track.id}
                pathOptions={{
                  color: '#4B5563',
                  weight: 4,
                  opacity: 0.7,
                  dashArray: '10, 10',
                }}
                positions={track.coordinates}
              />
            ))}
            
            {/* Major Stations */}
            {Array.from(new Set(trackSegments.flatMap(track => JSON.stringify(track.coordinates[0]))))
              .map(coordStr => JSON.parse(coordStr))
              .map((coord, index) => (
                <Circle
                  key={`station-${index}`}
                  center={[coord[0], coord[1]]}
                  radius={5000} // 5km radius
                  pathOptions={{
                    fillColor: '#1F2937',
                    color: '#6B7280',
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.6
                  }}
                />
              ))}
          </Pane>
          
          {/* Train Markers */}
          <MarkerClusterGroup
            chunkedLoading
            maxClusterRadius={50}
            spiderfyOnMaxZoom={true}
            showCoverageOnHover={false}
          >
            {filteredTrains.map((train) => {
              if (!train.lat || !train.lng) return null;
              
              return (
                <Marker
                  key={train.id}
                  position={[train.lat, train.lng]}
                  icon={createTrainIcon(train.type, train.heading)}
                  eventHandlers={{
                    click: () => onSelectTrain?.(train.id)
                  }}
                >
                  <Popup>
                    <div className="p-2 min-w-48">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-bold text-gray-800">{train.name}</h4>
                        <span className={`text-xs font-medium px-2 py-1 rounded ${
                          train.type === 'Express' ? 'bg-red-100 text-red-800' :
                          train.type === 'Freight' ? 'bg-green-100 text-green-800' :
                          'bg-blue-100 text-blue-800'
                        }`}>
                          {train.type}
                        </span>
                      </div>
                      <div className="space-y-1 text-sm text-gray-600">
                        <div className="flex justify-between">
                          <span>Status:</span>
                          <span className={`font-medium ${
                            train.status === 'On Time' ? 'text-green-600' :
                            train.status === 'Delayed' ? 'text-yellow-600' :
                            'text-red-600'
                          }`}>
                            {train.status}
                          </span>
                        </div>
                        {train.delay > 0 && (
                          <div className="flex justify-between">
                            <span>Delay:</span>
                            <span className="font-medium text-red-600">{train.delay} min</span>
                          </div>
                        )}
                        <div className="flex justify-between">
                          <span>Speed:</span>
                          <span className="font-medium">{train.currentSpeed} km/h</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Destination:</span>
                          <span className="font-medium">{train.destination}</span>
                        </div>
                      </div>
                    </div>
                  </Popup>
                </Marker>
              );
            })}
          </MarkerClusterGroup>
        </MapContainer>
      </div>

      {/* Stats */}
      <div className="mt-4 grid grid-cols-4 gap-4 text-center">
        <div className="bg-gray-900/50 rounded-lg p-2">
          <div className="text-lg font-bold text-red-400">
            {trains.filter(t => t.type === 'Express').length}
          </div>
          <div className="text-xs text-gray-400">Express</div>
        </div>
        <div className="bg-gray-900/50 rounded-lg p-2">
          <div className="text-lg font-bold text-green-400">
            {trains.filter(t => t.type === 'Freight').length}
          </div>
          <div className="text-xs text-gray-400">Freight</div>
        </div>
        <div className="bg-gray-900/50 rounded-lg p-2">
          <div className="text-lg font-bold text-blue-400">
            {trains.filter(t => t.type === 'Local').length}
          </div>
          <div className="text-xs text-gray-400">Local</div>
        </div>
        <div className="bg-gray-900/50 rounded-lg p-2">
          <div className="text-lg font-bold text-yellow-400">
            {trains.filter(t => t.status === 'Delayed').length}
          </div>
          <div className="text-xs text-gray-400">Delayed</div>
        </div>
      </div>
    </div>
  );
};
